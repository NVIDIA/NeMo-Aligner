# Copyright (c) 2020-2021, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: "CICD NeMo Aligner"

on:
  pull_request:
    branches:
      - 'main'
      - 'r**'
    types: [ labeled ]
  push:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      test_to_run:
        required: false
        default: all
        type: string
        description: Comma-separated list of tests to run. Use "all" to run the full test suite.

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs: 
  pre-flight:
    runs-on: ubuntu-latest
    outputs:
      test_to_run: ${{ steps.test_to_run.outputs.main }}
      all: ${{ steps.all.outputs.main }}
    steps:
      - name: Parse test_to_run
        id: test_to_run
        run: |
          parsed_string=$(echo ${{ inputs.test_to_run || 'all' }} | jq -c --raw-input 'split(",")')
          echo "main=${parsed_string}" | tee -a "$GITHUB_OUTPUT"
      - name: Parse all
        id: all
        run: |
          echo "main=${{ contains(fromJSON(steps.test_to_run.outputs.main), 'all') }}" | tee -a "$GITHUB_OUTPUT" 
        
  build-container:
    if: ${{ github.event.label.name == 'Run CICD' || github.ref == 'refs/heads/main' }}
    uses: ./.github/workflows/_build_container.yml

  Unit_Tests:
     needs: [build-container, pre-flight]
     uses: ./.github/workflows/_run_test.yml
     if: contains(fromJSON(needs.pre-flight.outputs.test_to_run), 'Unit_Tests') || needs.pre-flight.outputs.all == 'true'
     with:
       RUNNER: self-hosted-azure
       TIMEOUT: 20
       SCRIPT: |
          cd /opt/NeMo-Aligner/
          # PYTHONPATH=$(pwd) pytest tests/

  PPO:
    needs: [build-container]
    uses: ./.github/workflows/_run_test.yml
    #if: contains(fromJSON(needs.pre-flight.outputs.test_to_run), 'Unit_Tests') || needs.pre-flight.outputs.all == 'true'
    env:
      ALIGNER_CI_DIR: /home/TestData/aligner/checkpoints
    strategy:
     matrix:
       script:
         - |
           RM_NEMO_FILE=${{ env.ALIGNER_CI_DIR }}/llama3--nlayers4-hidden64-ffn224-dummy_rm-megatron_gpt.nemo \
           ACTOR_NEMO_FILE=${{ env.ALIGNER_CI_DIR }}/tiny-llama3-results-nlayers2-hidden128-ffn448-nhead4-qgroup2-megatron_gpt.nemo \
           bash /opt/NeMo-Aligner/tests/functional/ppo.sh

           RM_NEMO_FILE=/home/TestData/aligner/checkpoints/llama3--nlayers4-hidden64-ffn224-dummy_rm-megatron_gpt.nemo ACTOR_NEMO_FILE=/home/TestData/aligner/checkpoints/tiny-llama3-results-nlayers2-hidden128-ffn448-nhead4-qgroup2-megatron_gpt.nemo bash /opt/NeMo-Aligner/tests/functional/ppo.sh
    with:
      RUNNER: self-hosted
      TIMEOUT: 20
      SCRIPT: |
         export PYTHONPATH=/opt/NeMo-Aligner:${PYTHONPATH:-}
         git config --global --add safe.directory /opt/NeMo-Aligner
         ${{ matrix.script }}

  DPO:
    needs: [build-container]
    uses: ./.github/workflows/_run_test.yml
    #if: contains(fromJSON(needs.pre-flight.outputs.test_to_run), 'Unit_Tests') || needs.pre-flight.outputs.all == 'true'
    env:
      ALIGNER_CI_DIR: /home/TestData/aligner/checkpoints
    strategy:
     matrix:
       script:
         - |
           PRETRAINED_CHECKPOINT_NEMO_FILE=${{ env.ALIGNER_CI_DIR }}//tiny-llama3-results-nlayers2-hidden128-ffn448-nhead4-qgroup2-megatron_gpt.nemo \
           bash /opt/NeMo-Aligner/tests/functional/dpo.sh

    with:
      RUNNER: self-hosted
      TIMEOUT: 20
      SCRIPT: |
         export PYTHONPATH=/opt/NeMo-Aligner:${PYTHONPATH:-}
         git config --global --add safe.directory /opt/NeMo-Aligner
         ${{ matrix.script }}