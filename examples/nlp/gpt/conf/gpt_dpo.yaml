defaults:
  - optional tp_overlap@model.ub_tp_comm_overlap_cfg:

trainer:
  num_nodes: 8
  devices: 8
  accelerator: gpu
  precision: bf16
  
  # dpo specific args
  dpo:
    max_epochs: 1
    max_steps: -1
    val_check_interval: 0.1
    save_interval: 100

    # how many GBS we loop over
    limit_val_batches: 1.0
    gradient_clip_val: 1.0

  # do not change these
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_time: null
  max_epochs: ${.dpo.max_epochs}
  max_steps: ${.dpo.max_steps}

exp_manager:
  explicit_log_dir: /results
  exp_dir: null
  name: megatron_gpt
  max_time_per_run: ${trainer.max_time}
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: nemo_aligner_dpo
    name: rlhf_gpt3_dpo
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 3
    mode: min
    always_save_nemo: False # saves nemo file during validation, not implemented for model parallel
    save_nemo_on_train_end: True # not recommended when training large models on clusters with short time limits
    filename: 'megatron_gpt--{${.monitor}:.3f}-{step}-{consumed_samples}-{epoch}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}

pretrained_checkpoint:
  restore_from_path: null

model:  
  mcore_gpt: True
  micro_batch_size: 1
  global_batch_size: 64
  megatron_amp_O2: True

  dpo:
    log_prob_forward_micro_batch_size: 1
    ref_policy_kl_penalty: 0.2
    average_log_probs: False
  
  #encoder_seq_length: 4096
  #max_position_embeddings: ${model.encoder_seq_length}

  # miscellaneous
  seed: 1234

  #peft 
  peft:
    peft_scheme: "none"  # ["lora", "none"]
    restore_from_path: null
    restore_from_ckpt:
      checkpoint_dir: null
      checkpoint_name: null

    lora_tuning:
      target_modules: ['attention_qkv'] # this can either be 'attention_qkv','attention_dense','mlp_fc1','mlp_fc2', 'attention' (qkv & dense), 'mlp' (fc1 & fc2), 'all'
      adapter_dim: 32
      adapter_dropout: 0.0
      column_init_method: 'xavier' # IGNORED if linear_adapter is used, options: xavier, zero or normal
      row_init_method: 'zero' # IGNORED if linear_adapter is used, options: xavier, zero or normal
      layer_selection:  null  # selects in which layers to add lora adapters. e.g. [1,12] will add lora to layer 1 (lowest) and 12. null will apply adapters to all layers
      weight_tying: False
      position_embedding_strategy: null # used only when weight_tying is True

  optim:
    name: distributed_fused_adam
    bucket_cap_mb: 200
    overlap_grad_sync: False
    contiguous_grad_buffer: True
    lr: 9e-6
    weight_decay: 0.1 
    betas: 
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 10
      constant_steps: 1000
      min_lr: 9e-7

  data:
    data_impl: jsonl
    splits_string: null
    seq_length: ${model.encoder_seq_length}
    skip_warmup: True
    num_workers: 2
    dataloader_type: single # cyclic
    reset_position_ids: False # Reset position ids after end-of-document token
    reset_attention_mask: False # Reset attention mask after end-of-document token
    eod_mask_loss: False # Mask loss for the end of document tokens
    index_mapping_dir: null # path to save index mapping .npy files, by default will save in the same location as data_prefix
    data_prefix: null

  # define fields from the base model's config that should be ignored when merging with this config.
  overwrite_base_config:
    data:
      data_prefix: True

precision: ${trainer.precision}
