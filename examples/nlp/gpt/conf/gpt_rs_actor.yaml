defaults:
  - optional tp_overlap@model.ub_tp_comm_overlap_cfg:

trainer:
  # these args are respected
  num_nodes: 8
  devices: 8
  accelerator: gpu
  precision: bf16

  rs:
    max_epochs: 1
    max_steps: -1  # max rs steps (-1 to go through the whole train set)
    val_check_interval: 10
    save_interval: ${.val_check_interval}
    gradient_clip_val: 1.0

    # pick up from the model
    # *do not change this*
    model_gbs: ${model.global_batch_size}
    model_mbs: ${model.micro_batch_size}

    # the sequence length to pad the rollout batch to
    # this reduces fragmentation at the cost of using more
    # memory, set to null if we don't want to pad it
    # to a constant size
    rollout_batch_seq_length: null

  # no need to change these
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_time: null
  max_epochs: ${.rs.max_epochs}
  max_steps: ${.rs.max_steps}

remote_rm:
  # what to pad the inputs to
  # set to None if no padding when sending data for reward model inference
  pad_to_length: ${model.encoder_seq_length}

  # reward model server
  reward_model:
    name: reward_model
    ip: localhost
    port: 5555


exp_manager:
  explicit_log_dir: /results
  exp_dir: null
  name: megatron_gpt_rs_actor
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: nemo_aligner_rs
    name: gpt3_rs_2b
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_global_rewards
    save_top_k: 1
    mode: max
    always_save_nemo: False # saves nemo file during validation, not implemented for model parallel
    save_nemo_on_train_end: True # not recommended when training large models on clusters with short time limits
    filename: 'megatron_gpt-{step}-{consumed_samples}-{rs_optimization_step}-{epoch}-{val_global_rewards:.3f}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}

pretrained_checkpoint:
  restore_from_path: null

model:

  rs:
    # training generation mbs
    rollout_micro_batch_size: 8
    num_rollout_samples: 512

    # mbs to do log prob inference, can be set to
    # lower than rollout_micro_batch_size to reduce
    # memory usage
    forward_micro_batch_size: ${.rollout_micro_batch_size}

    num_rollouts_per_prompt: 4  # Number of completions to sample per prompt
    top_n_rollouts: 1  # Number of completions to select based on reward and train upon (per prompt)

    # val generation mbs
    val_rollout_micro_batch_size: ${.rollout_micro_batch_size}
    num_val_samples: ${.num_rollout_samples}

    # to offload during generation or not
    offload_adam_states: True

    # params for generation
    sampling_params:
      use_greedy: False
      temperature: 1.0
      top_k: 0
      top_p: 1.0
      repetition_penalty: 1.0
      add_BOS: False
      all_probs: False
      compute_logprob: False
      end_strings: ["<|endoftext|>", "<extra_id_1>"]

    # length argument for autoregressive sampling
    # max length means max amount of tokens to generate
    length_params:
      max_length: ${int_div:${model.encoder_seq_length}, 2}
      min_length: 1

  #peft 
  peft:
    peft_scheme: "none"  # ["lora", "none"]
    restore_from_path: null
    restore_from_ckpt:
      checkpoint_dir: null
      checkpoint_name: null

    lora_tuning:
      target_modules: ['attention_qkv'] # this can either be 'attention_qkv','attention_dense','mlp_fc1','mlp_fc2', 'attention' (qkv & dense), 'mlp' (fc1 & fc2), 'all'
      adapter_dim: 32
      adapter_dropout: 0.0
      column_init_method: 'xavier' # IGNORED if linear_adapter is used, options: xavier, zero or normal
      row_init_method: 'zero' # IGNORED if linear_adapter is used, options: xavier, zero or normal
      layer_selection:  null  # selects in which layers to add lora adapters. e.g. [1,12] will add lora to layer 1 (lowest) and 12. null will apply adapters to all layers
      weight_tying: False
      position_embedding_strategy: null # used only when weight_tying is True

  mcore_gpt: True
  # these control the mbs/gbs during RS training
  micro_batch_size: 1
  global_batch_size: 64
  megatron_amp_O2: True

  encoder_seq_length: 4096
  max_position_embeddings: ${model.encoder_seq_length}

  ## Sequence Parallelism
  sequence_parallel: False

  # miscellaneous
  seed: 1234

  optim:
    name: distributed_fused_adam
    bucket_cap_mb: 200
    overlap_grad_sync: False
    contiguous_grad_buffer: True
    lr: 9e-7
    weight_decay: 0.1
    betas:
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 10
      constant_steps: 1000
      min_lr: 9e-8

  precision: ${trainer.precision}

  data:
    data_impl: jsonl
    splits_string: null
    seq_length: ${model.encoder_seq_length}
    skip_warmup: True
    num_workers: 0
    dataloader_type: single # cyclic
    reset_position_ids: False # Reset position ids after end-of-document token
    reset_attention_mask: False # Reset attention mask after end-of-document token
    eod_mask_loss: False # Mask loss for the end of document tokens
    index_mapping_dir: null # path to save index mapping .npy files, by default will save in the same location as data_prefix
    data_prefix: null

  # define fields from the base model's config that should be ignored when merging with this config.
  overwrite_base_config:
    data:
      data_prefix: True